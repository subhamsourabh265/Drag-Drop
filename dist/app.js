(()=>{"use strict";console.log("autobind");var t,e=function(t,e,n){var r=n.value;return{configurable:!0,get:function(){return r.bind(this)}}};!function(t){t[t.Active=0]="Active",t[t.Finished=1]="Finished"}(t||(t={}));var n,r=function(t,e,n,r,o){this.id=t,this.title=e,this.description=n,this.people=r,this.status=o},o=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=function(e){function n(){var t=e.call(this)||this;return t.projects=[],t}return o(n,e),n.getInstance=function(){return this.instance||(this.instance=new n),this.instance},n.prototype.addProject=function(e,n,o){var i=new r(Math.random().toString(),e,n,o,t.Active);this.projects.push(i),this.updateListeners()},n.prototype.moveProject=function(t,e){var n=this.projects.find((function(e){return e.id===t}));n&&n.status!==e&&(n.status=e,this.updateListeners())},n.prototype.updateListeners=function(){for(var t=0,e=this.listeners;t<e.length;t++)(0,e[t])(this.projects.slice())},n}(function(){function t(){this.listeners=[]}return t.prototype.addListener=function(t){this.listeners.push(t)},t}()).getInstance(),c=function(t){var e=!0;return t.required&&(e=e&&!!t.value),null!=t.minLength&&(e=e&&t.value.toString().length>=t.minLength),null!=t.maxLength&&(e=e&&t.value.toString().length<=t.maxLength),null!=t.min&&(e=e&&+t.value>=t.min),null!=t.max&&(e=e&&+t.value<=t.max),e},s=function(){function t(t,e,n,r){this.templateElement=document.getElementById(t),this.hostElement=document.getElementById(e);var o=document.importNode(this.templateElement.content,!0);this.element=o.firstElementChild,r&&(this.element.id=r),this.attach(n)}return t.prototype.attach=function(t){this.hostElement.insertAdjacentElement(t?"afterbegin":"beforeend",this.element)},t}(),l=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),a=function(t){function n(){var e=t.call(this,"project-input","app",!0,"user-input")||this;return e.titleInputElement=e.element.querySelector("#title"),e.descriptionInputElement=e.element.querySelector("#description"),e.peopleInputElement=e.element.querySelector("#people"),e.configure(),e}return l(n,t),n.prototype.configure=function(){this.element.addEventListener("submit",this.submitHandler)},n.prototype.renderContent=function(){},n.prototype.gatherUserInput=function(){var t=this.titleInputElement.value,e=this.descriptionInputElement.value,n=+this.peopleInputElement.value,r={value:e,required:!0,minLength:5},o={value:n,required:!0,min:1,max:5};if(c({value:t,required:!0})&&c(r)&&c(o))return[t,e,n];alert("Invalid input, please try again!")},n.prototype.clearInputs=function(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""},n.prototype.submitHandler=function(t){t.preventDefault();var e=this.gatherUserInput();if(Array.isArray(e)){var n=e[0],r=e[1],o=e[2];console.log(n,r,o),i.addProject(n,r,o),this.clearInputs()}},function(t,e,n,r){var o,i=arguments.length,c=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(c=(i<3?o(c):i>3?o(e,n,c):o(e,n))||c);i>3&&c&&Object.defineProperty(e,n,c)}([e],n.prototype,"submitHandler",null),n}(s),u=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),p=function(t,e,n,r){var o,i=arguments.length,c=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(c=(i<3?o(c):i>3?o(e,n,c):o(e,n))||c);return i>3&&c&&Object.defineProperty(e,n,c),c},f=function(t){function n(e,n){var r=t.call(this,"single-project",e,!1,n.id)||this;return r.project=n,r.configure(),r.renderContent(),r}return u(n,t),Object.defineProperty(n.prototype,"persons",{get:function(){return 1===this.project.people?"1 person":"".concat(this.project.people," persons")},enumerable:!1,configurable:!0}),n.prototype.dragStartHandler=function(t){t.dataTransfer.setData("text/plain",this.project.id),t.dataTransfer.effectAllowed="move"},n.prototype.dragEndHandler=function(t){console.log("DragEnd")},n.prototype.configure=function(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)},n.prototype.renderContent=function(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent=this.project.description},p([e],n.prototype,"dragStartHandler",null),p([e],n.prototype,"dragEndHandler",null),n}(s),d=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),h=function(t,e,n,r){var o,i=arguments.length,c=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(c=(i<3?o(c):i>3?o(e,n,c):o(e,n))||c);return i>3&&c&&Object.defineProperty(e,n,c),c},y=function(n){function r(t){var e=n.call(this,"project-list","app",!1,"".concat(t,"-projects"))||this;return e.type=t,e.assignedProjects=[],e.configure(),e.renderContent(),e}return d(r,n),r.prototype.dragOverHandler=function(t){t.dataTransfer&&"text/plain"===t.dataTransfer.types[0]&&(t.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))},r.prototype.dropHandler=function(e){var n=e.dataTransfer.getData("text/plain");i.moveProject(n,"active"===this.type?t.Active:t.Finished)},r.prototype.dragLeaveHandler=function(t){this.element.querySelector("ul").classList.remove("droppable")},r.prototype.configure=function(){var e=this;this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("drop",this.dropHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),i.addListener((function(n){var r=n.filter((function(n){return"active"===e.type?n.status===t.Active:n.status===t.Finished}));e.assignedProjects=r,e.renderProjects()}))},r.prototype.renderContent=function(){var t="".concat(this.type,"-projects-list");this.element.querySelector("ul").id=t,this.element.querySelector("h2").textContent="".concat(this.type.toUpperCase()," PROJECTS")},r.prototype.renderProjects=function(){document.getElementById("".concat(this.type,"-projects-list")).innerHTML="";for(var t=0,e=this.assignedProjects;t<e.length;t++){var n=e[t];new f(this.element.querySelector("ul").id,n)}},h([e],r.prototype,"dragOverHandler",null),h([e],r.prototype,"dropHandler",null),h([e],r.prototype,"dragLeaveHandler",null),r}(s);new a,new y("active"),new y("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFlBQzdDLEVBRVEsWUFBQUYsZUFBUixXQUNpQnZELFNBQVNDLGVBQWUsVUFBRzlDLEtBQUtzRixLQUFJLG1CQUM1Q2lCLFVBQVksR0FDbkIsSUFBc0IsVUFBQXZHLEtBQUt1RixpQkFBTCxlQUF1QixDQUF4QyxJQUFNaUIsRUFBTyxLQUNoQixJQUFJQyxFQUFZekcsS0FBS21ELFFBQVFLLGNBQWMsTUFBT3ZELEdBQUl1RyxFQUN4RCxDQUNGLEVBdERBLEdBRENqSCxHLG9DQVVELEdBRENBLEcsZ0NBVUQsR0FEQ0EsRyxxQ0FzQ0gsQyxDQXJFQSxDQUNVc0YsR0NOVixJQUFJNkIsRUFFSixJQUFJQyxFQUFZLFVBRWhCLElBQUlBLEVBQVksVyIsInNvdXJjZXMiOlsid2VicGFjazovL2RyYWctZHJvcC8uL3NyYy9kZWNvcmF0b3JzL2F1dG9iaW5kLnRzIiwid2VicGFjazovL2RyYWctZHJvcC8uL3NyYy9tb2RlbHMvcHJvamVjdC50cyIsIndlYnBhY2s6Ly9kcmFnLWRyb3AvLi9zcmMvc3RhdGUvcHJvamVjdC1zdGF0ZS50cyIsIndlYnBhY2s6Ly9kcmFnLWRyb3AvLi9zcmMvdXRpbC92YWxpZGF0aW9uLnRzIiwid2VicGFjazovL2RyYWctZHJvcC8uL3NyYy9jb21wb25lbnRzL2Jhc2UtY29tcG9uZW50LnRzIiwid2VicGFjazovL2RyYWctZHJvcC8uL3NyYy9jb21wb25lbnRzL3Byb2plY3QtaW5wdXQudHMiLCJ3ZWJwYWNrOi8vZHJhZy1kcm9wLy4vc3JjL2NvbXBvbmVudHMvcHJvamVjdC1pdGVtLnRzIiwid2VicGFjazovL2RyYWctZHJvcC8uL3NyYy9jb21wb25lbnRzL3Byb2plY3QtbGlzdC50cyIsIndlYnBhY2s6Ly9kcmFnLWRyb3AvLi9zcmMvYXBwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGF1dG9iaW5kIGRlY29yYXRvclxyXG5jb25zb2xlLmxvZygnYXV0b2JpbmQnKTtcclxuZXhwb3J0IGNvbnN0IGF1dG9iaW5kID0gKFxyXG4gIF86IGFueSxcclxuICBfMTogc3RyaW5nLFxyXG4gIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvclxyXG4pID0+IHtcclxuICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgY29uc3QgYWRqRGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yID0ge1xyXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgZ2V0KCkge1xyXG4gICAgICBjb25zdCBib3VuZGZuID0gb3JpZ2luYWxNZXRob2QuYmluZCh0aGlzKTtcclxuICAgICAgcmV0dXJuIGJvdW5kZm47XHJcbiAgICB9LFxyXG4gIH07XHJcbiAgcmV0dXJuIGFkakRlc2NyaXB0b3I7XHJcbn07XHJcbiIsIi8vIFByb2plY3QgVHlwZVxyXG5leHBvcnQgZW51bSBQcm9qZWN0U3RhdHVzIHtcclxuICBBY3RpdmUsXHJcbiAgRmluaXNoZWQsXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9qZWN0IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBpZDogc3RyaW5nLFxyXG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmcsXHJcbiAgICBwdWJsaWMgZGVzY3JpcHRpb246IHN0cmluZyxcclxuICAgIHB1YmxpYyBwZW9wbGU6IG51bWJlcixcclxuICAgIHB1YmxpYyBzdGF0dXM6IFByb2plY3RTdGF0dXNcclxuICApIHt9XHJcbn1cclxuIiwiaW1wb3J0IHsgUHJvamVjdCwgUHJvamVjdFN0YXR1cyB9IGZyb20gXCIuLi9tb2RlbHMvcHJvamVjdFwiO1xyXG5cclxuLy8gUHJvamVjdCBTdGF0ZSBNYW5hZ2VtZW50XHJcbnR5cGUgTGlzdGVuZXI8VD4gPSAoaXRlbXM6IFRbXSkgPT4gdm9pZDtcclxuXHJcbmNsYXNzIFN0YXRlPFQ+IHtcclxuICBwcm90ZWN0ZWQgbGlzdGVuZXJzOiBMaXN0ZW5lcjxUPltdID0gW107XHJcblxyXG4gIGFkZExpc3RlbmVyKGxpc3RlbmVyRm46IExpc3RlbmVyPFQ+KSB7XHJcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyRm4pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFByb2plY3RTdGF0ZSBleHRlbmRzIFN0YXRlPFByb2plY3Q+IHtcclxuICBwcml2YXRlIHByb2plY3RzOiBQcm9qZWN0W10gPSBbXTtcclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFByb2plY3RTdGF0ZTtcclxuXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICBpZiAodGhpcy5pbnN0YW5jZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcclxuICAgIH1cclxuICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgUHJvamVjdFN0YXRlKCk7XHJcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcclxuICB9XHJcblxyXG4gIGFkZFByb2plY3QodGl0bGU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZywgbm9PZlBlb3BsZTogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gbmV3IFByb2plY3QoXHJcbiAgICAgIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKSxcclxuICAgICAgdGl0bGUsXHJcbiAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICBub09mUGVvcGxlLFxyXG4gICAgICBQcm9qZWN0U3RhdHVzLkFjdGl2ZVxyXG4gICAgKTtcclxuICAgIHRoaXMucHJvamVjdHMucHVzaChuZXdQcm9qZWN0KTtcclxuICAgIHRoaXMudXBkYXRlTGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBtb3ZlUHJvamVjdChwcm9qZWN0SWQ6IHN0cmluZywgbmV3U3RhdHVzOiBQcm9qZWN0U3RhdHVzKSB7XHJcbiAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5wcm9qZWN0cy5maW5kKChwcmopID0+IHByai5pZCA9PT0gcHJvamVjdElkKTtcclxuICAgIGlmIChwcm9qZWN0ICYmIHByb2plY3Quc3RhdHVzICE9PSBuZXdTdGF0dXMpIHtcclxuICAgICAgcHJvamVjdC5zdGF0dXMgPSBuZXdTdGF0dXM7XHJcbiAgICAgIHRoaXMudXBkYXRlTGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZUxpc3RlbmVycygpIHtcclxuICAgIGZvciAoY29uc3QgbGlzdGVuZXJGbiBvZiB0aGlzLmxpc3RlbmVycykge1xyXG4gICAgICBsaXN0ZW5lckZuKHRoaXMucHJvamVjdHMuc2xpY2UoKSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcHJvamVjdFN0YXRlID0gUHJvamVjdFN0YXRlLmdldEluc3RhbmNlKCk7XHJcbiIsIi8vIFZhbGlkYXRpb24gTG9naWNcclxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0YWJsZSB7XHJcbiAgdmFsdWU6IHN0cmluZyB8IG51bWJlcjtcclxuICByZXF1aXJlZD86IGJvb2xlYW47XHJcbiAgbWluTGVuZ3RoPzogbnVtYmVyO1xyXG4gIG1heExlbmd0aD86IG51bWJlcjtcclxuICBtaW4/OiBudW1iZXI7XHJcbiAgbWF4PzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdmFsaWRhdGUgPSAodmFsaWRhdGFibGVJbnB1dDogVmFsaWRhdGFibGUpID0+IHtcclxuICBsZXQgaXN2YWxpZCA9IHRydWU7XHJcbiAgaWYgKHZhbGlkYXRhYmxlSW5wdXQucmVxdWlyZWQpIHtcclxuICAgIGlzdmFsaWQgPSBpc3ZhbGlkICYmICEhdmFsaWRhdGFibGVJbnB1dC52YWx1ZTtcclxuICB9XHJcbiAgaWYgKHZhbGlkYXRhYmxlSW5wdXQubWluTGVuZ3RoICE9IG51bGwpIHtcclxuICAgIGlzdmFsaWQgPVxyXG4gICAgICBpc3ZhbGlkICYmXHJcbiAgICAgIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUudG9TdHJpbmcoKS5sZW5ndGggPj0gdmFsaWRhdGFibGVJbnB1dC5taW5MZW5ndGg7XHJcbiAgfVxyXG4gIGlmICh2YWxpZGF0YWJsZUlucHV0Lm1heExlbmd0aCAhPSBudWxsKSB7XHJcbiAgICBpc3ZhbGlkID1cclxuICAgICAgaXN2YWxpZCAmJlxyXG4gICAgICB2YWxpZGF0YWJsZUlucHV0LnZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoIDw9IHZhbGlkYXRhYmxlSW5wdXQubWF4TGVuZ3RoO1xyXG4gIH1cclxuICBpZiAodmFsaWRhdGFibGVJbnB1dC5taW4gIT0gbnVsbCkge1xyXG4gICAgaXN2YWxpZCA9IGlzdmFsaWQgJiYgK3ZhbGlkYXRhYmxlSW5wdXQudmFsdWUgPj0gdmFsaWRhdGFibGVJbnB1dC5taW47XHJcbiAgfVxyXG4gIGlmICh2YWxpZGF0YWJsZUlucHV0Lm1heCAhPSBudWxsKSB7XHJcbiAgICBpc3ZhbGlkID0gaXN2YWxpZCAmJiArdmFsaWRhdGFibGVJbnB1dC52YWx1ZSA8PSB2YWxpZGF0YWJsZUlucHV0Lm1heDtcclxuICB9XHJcbiAgcmV0dXJuIGlzdmFsaWQ7XHJcbn07XHJcbiIsIi8vIENvbXBvbmVudCBCYXNlIENsYXNzXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21wb25lbnQ8VCBleHRlbmRzIEhUTUxFbGVtZW50LCBVIGV4dGVuZHMgSFRNTEVsZW1lbnQ+IHtcclxuICB0ZW1wbGF0ZUVsZW1lbnQ6IEhUTUxUZW1wbGF0ZUVsZW1lbnQ7XHJcbiAgaG9zdEVsZW1lbnQ6IFQ7XHJcbiAgZWxlbWVudDogVTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICB0ZW1wbGF0ZUlkOiBzdHJpbmcsXHJcbiAgICBob3N0RWxlbWVudElkOiBzdHJpbmcsXHJcbiAgICBpbnNlcnRBdFN0YXJ0OiBib29sZWFuLFxyXG4gICAgbmV3RWxlbWVudElkPzogc3RyaW5nXHJcbiAgKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICB0ZW1wbGF0ZUlkXHJcbiAgICApISBhcyBIVE1MVGVtcGxhdGVFbGVtZW50O1xyXG4gICAgdGhpcy5ob3N0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhvc3RFbGVtZW50SWQpISBhcyBUO1xyXG4gICAgY29uc3QgaW1wb3J0ZWROb2RlID0gZG9jdW1lbnQuaW1wb3J0Tm9kZShcclxuICAgICAgdGhpcy50ZW1wbGF0ZUVsZW1lbnQuY29udGVudCxcclxuICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIHRoaXMuZWxlbWVudCA9IGltcG9ydGVkTm9kZS5maXJzdEVsZW1lbnRDaGlsZCBhcyBVO1xyXG4gICAgaWYgKG5ld0VsZW1lbnRJZCkge1xyXG4gICAgICB0aGlzLmVsZW1lbnQuaWQgPSBuZXdFbGVtZW50SWQ7XHJcbiAgICB9XHJcbiAgICB0aGlzLmF0dGFjaChpbnNlcnRBdFN0YXJ0KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXR0YWNoKGluc2VydEF0U3RhcnQ6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuaG9zdEVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFxyXG4gICAgICBpbnNlcnRBdFN0YXJ0ID8gXCJhZnRlcmJlZ2luXCIgOiBcImJlZm9yZWVuZFwiLFxyXG4gICAgICB0aGlzLmVsZW1lbnRcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBhYnN0cmFjdCBjb25maWd1cmUoKTogdm9pZDtcclxuICBhYnN0cmFjdCByZW5kZXJDb250ZW50KCk6IHZvaWQ7XHJcbn1cclxuIiwiaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tIFwiLi4vZGVjb3JhdG9ycy9hdXRvYmluZFwiO1xyXG5pbXBvcnQgeyBwcm9qZWN0U3RhdGUgfSBmcm9tIFwiLi4vc3RhdGUvcHJvamVjdC1zdGF0ZVwiO1xyXG5pbXBvcnQgeyB2YWxpZGF0ZSB9IGZyb20gXCIuLi91dGlsL3ZhbGlkYXRpb25cIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vYmFzZS1jb21wb25lbnRcIjtcclxuXHJcbi8vIFByb2plY3QgaW5wdXQgY2xhc3NcclxuZXhwb3J0IGNsYXNzIFByb2plY3RJbnB1dCBleHRlbmRzIENvbXBvbmVudDxIVE1MRGl2RWxlbWVudCwgSFRNTEZvcm1FbGVtZW50PiB7XHJcbiAgdGl0bGVJbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgcGVvcGxlSW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFwicHJvamVjdC1pbnB1dFwiLCBcImFwcFwiLCB0cnVlLCBcInVzZXItaW5wdXRcIik7XHJcbiAgICB0aGlzLnRpdGxlSW5wdXRFbGVtZW50ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiI3RpdGxlXCJcclxuICAgICkhIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICB0aGlzLmRlc2NyaXB0aW9uSW5wdXRFbGVtZW50ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiI2Rlc2NyaXB0aW9uXCJcclxuICAgICkhIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICB0aGlzLnBlb3BsZUlucHV0RWxlbWVudCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIiNwZW9wbGVcIlxyXG4gICAgKSEgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgIHRoaXMuY29uZmlndXJlKCk7XHJcbiAgfVxyXG5cclxuICBjb25maWd1cmUoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCB0aGlzLnN1Ym1pdEhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyQ29udGVudCgpIHt9XHJcblxyXG4gIHByaXZhdGUgZ2F0aGVyVXNlcklucHV0KCk6IFtzdHJpbmcsIHN0cmluZywgbnVtYmVyXSB8IHZvaWQge1xyXG4gICAgY29uc3QgZW50ZXJlZFRpdGxlID0gdGhpcy50aXRsZUlucHV0RWxlbWVudC52YWx1ZTtcclxuICAgIGNvbnN0IGVudGVyZWREZXNjcmlwdGlvbiA9IHRoaXMuZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQudmFsdWU7XHJcbiAgICBjb25zdCBlbnRlcmVkUGVvcGxlID0gK3RoaXMucGVvcGxlSW5wdXRFbGVtZW50LnZhbHVlO1xyXG5cclxuICAgIGNvbnN0IHRpdGxlVmFsaWRhdGFibGUgPSB7XHJcbiAgICAgIHZhbHVlOiBlbnRlcmVkVGl0bGUsXHJcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uVmFsaWRhdGFibGUgPSB7XHJcbiAgICAgIHZhbHVlOiBlbnRlcmVkRGVzY3JpcHRpb24sXHJcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICBtaW5MZW5ndGg6IDUsXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGVvcGxlVmFsaWRhdGFibGUgPSB7XHJcbiAgICAgIHZhbHVlOiBlbnRlcmVkUGVvcGxlLFxyXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgbWluOiAxLFxyXG4gICAgICBtYXg6IDUsXHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChcclxuICAgICAgdmFsaWRhdGUodGl0bGVWYWxpZGF0YWJsZSkgJiZcclxuICAgICAgdmFsaWRhdGUoZGVzY3JpcHRpb25WYWxpZGF0YWJsZSkgJiZcclxuICAgICAgdmFsaWRhdGUocGVvcGxlVmFsaWRhdGFibGUpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIFtlbnRlcmVkVGl0bGUsIGVudGVyZWREZXNjcmlwdGlvbiwgZW50ZXJlZFBlb3BsZV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhbGVydChcIkludmFsaWQgaW5wdXQsIHBsZWFzZSB0cnkgYWdhaW4hXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjbGVhcklucHV0cygpIHtcclxuICAgIHRoaXMudGl0bGVJbnB1dEVsZW1lbnQudmFsdWUgPSBcIlwiO1xyXG4gICAgdGhpcy5kZXNjcmlwdGlvbklucHV0RWxlbWVudC52YWx1ZSA9IFwiXCI7XHJcbiAgICB0aGlzLnBlb3BsZUlucHV0RWxlbWVudC52YWx1ZSA9IFwiXCI7XHJcbiAgfVxyXG5cclxuICBAYXV0b2JpbmRcclxuICBwcml2YXRlIHN1Ym1pdEhhbmRsZXIoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgdXNlcklucHV0ID0gdGhpcy5nYXRoZXJVc2VySW5wdXQoKTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHVzZXJJbnB1dCkpIHtcclxuICAgICAgY29uc3QgW3RpdGxlLCBkZXNjLCBwZW9wbGVdID0gdXNlcklucHV0O1xyXG4gICAgICBjb25zb2xlLmxvZyh0aXRsZSwgZGVzYywgcGVvcGxlKTtcclxuICAgICAgcHJvamVjdFN0YXRlLmFkZFByb2plY3QodGl0bGUsIGRlc2MsIHBlb3BsZSk7XHJcbiAgICAgIHRoaXMuY2xlYXJJbnB1dHMoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tIFwiLi4vZGVjb3JhdG9ycy9hdXRvYmluZFwiO1xyXG5pbXBvcnQgeyBEcmFnZ2FibGUgfSBmcm9tIFwiLi4vbW9kZWxzL2RyYWctZHJvcC1pbnRlcmZhY2VzXCI7XHJcbmltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi4vbW9kZWxzL3Byb2plY3RcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vYmFzZS1jb21wb25lbnRcIjtcclxuXHJcbi8vIFByb2plY3QgSXRlbSBjbGFzc1xyXG5leHBvcnQgY2xhc3MgUHJvamVjdEl0ZW1cclxuICBleHRlbmRzIENvbXBvbmVudDxIVE1MVUxpc3RFbGVtZW50LCBIVE1MTElFbGVtZW50PlxyXG4gIGltcGxlbWVudHMgRHJhZ2dhYmxlXHJcbntcclxuICBwcml2YXRlIHByb2plY3Q6IFByb2plY3Q7XHJcblxyXG4gIGdldCBwZXJzb25zKCkge1xyXG4gICAgaWYgKHRoaXMucHJvamVjdC5wZW9wbGUgPT09IDEpIHtcclxuICAgICAgcmV0dXJuIFwiMSBwZXJzb25cIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBgJHt0aGlzLnByb2plY3QucGVvcGxlfSBwZXJzb25zYDtcclxuICAgIH1cclxuICB9XHJcbiAgY29uc3RydWN0b3IoaG9zdElkOiBzdHJpbmcsIHByb2plY3Q6IFByb2plY3QpIHtcclxuICAgIHN1cGVyKFwic2luZ2xlLXByb2plY3RcIiwgaG9zdElkLCBmYWxzZSwgcHJvamVjdC5pZCk7XHJcbiAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xyXG4gICAgdGhpcy5jb25maWd1cmUoKTtcclxuICAgIHRoaXMucmVuZGVyQ29udGVudCgpO1xyXG4gIH1cclxuXHJcbiAgQGF1dG9iaW5kXHJcbiAgZHJhZ1N0YXJ0SGFuZGxlcihldmVudDogRHJhZ0V2ZW50KTogdm9pZCB7XHJcbiAgICBldmVudC5kYXRhVHJhbnNmZXIhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHRoaXMucHJvamVjdC5pZCk7XHJcbiAgICBldmVudC5kYXRhVHJhbnNmZXIhLmVmZmVjdEFsbG93ZWQgPSBcIm1vdmVcIjtcclxuICB9XHJcblxyXG4gIEBhdXRvYmluZFxyXG4gIGRyYWdFbmRIYW5kbGVyKF86IERyYWdFdmVudCk6IHZvaWQge1xyXG4gICAgY29uc29sZS5sb2coXCJEcmFnRW5kXCIpO1xyXG4gIH1cclxuXHJcbiAgY29uZmlndXJlKCkge1xyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnc3RhcnRcIiwgdGhpcy5kcmFnU3RhcnRIYW5kbGVyKTtcclxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2VuZFwiLCB0aGlzLmRyYWdFbmRIYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckNvbnRlbnQoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcImgyXCIpIS50ZXh0Q29udGVudCA9IHRoaXMucHJvamVjdC50aXRsZTtcclxuICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaDNcIikhLnRleHRDb250ZW50ID0gdGhpcy5wZXJzb25zICsgXCIgYXNzaWduZWRcIjtcclxuICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwicFwiKSEudGV4dENvbnRlbnQgPSB0aGlzLnByb2plY3QuZGVzY3JpcHRpb247XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSBcIi4uL2RlY29yYXRvcnMvYXV0b2JpbmRcIjtcclxuaW1wb3J0IHsgRHJhZ1RhcmdldCB9IGZyb20gXCIuLi9tb2RlbHMvZHJhZy1kcm9wLWludGVyZmFjZXNcIjtcclxuaW1wb3J0IHsgUHJvamVjdCwgUHJvamVjdFN0YXR1cyB9IGZyb20gXCIuLi9tb2RlbHMvcHJvamVjdFwiO1xyXG5pbXBvcnQgeyBwcm9qZWN0U3RhdGUgfSBmcm9tIFwiLi4vc3RhdGUvcHJvamVjdC1zdGF0ZVwiO1xyXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi9iYXNlLWNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBQcm9qZWN0SXRlbSB9IGZyb20gXCIuL3Byb2plY3QtaXRlbVwiO1xyXG5cclxuLy8gUHJvamVjdCBMaXN0IGNsYXNzXHJcbmV4cG9ydCBjbGFzcyBQcm9qZWN0TGlzdFxyXG4gIGV4dGVuZHMgQ29tcG9uZW50PEhUTUxEaXZFbGVtZW50LCBIVE1MRWxlbWVudD5cclxuICBpbXBsZW1lbnRzIERyYWdUYXJnZXRcclxue1xyXG4gIGFzc2lnbmVkUHJvamVjdHM6IFByb2plY3RbXTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0eXBlOiBcImFjdGl2ZVwiIHwgXCJmaW5pc2hlZFwiKSB7XHJcbiAgICBzdXBlcihcInByb2plY3QtbGlzdFwiLCBcImFwcFwiLCBmYWxzZSwgYCR7dHlwZX0tcHJvamVjdHNgKTtcclxuICAgIHRoaXMuYXNzaWduZWRQcm9qZWN0cyA9IFtdO1xyXG4gICAgdGhpcy5jb25maWd1cmUoKTtcclxuICAgIHRoaXMucmVuZGVyQ29udGVudCgpO1xyXG4gIH1cclxuXHJcbiAgQGF1dG9iaW5kXHJcbiAgZHJhZ092ZXJIYW5kbGVyKGV2ZW50OiBEcmFnRXZlbnQpOiB2b2lkIHtcclxuICAgIGlmIChldmVudC5kYXRhVHJhbnNmZXIgJiYgZXZlbnQuZGF0YVRyYW5zZmVyLnR5cGVzWzBdID09PSBcInRleHQvcGxhaW5cIikge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBjb25zdCBsaXN0RWwgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcInVsXCIpITtcclxuICAgICAgbGlzdEVsLmNsYXNzTGlzdC5hZGQoXCJkcm9wcGFibGVcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAYXV0b2JpbmRcclxuICBkcm9wSGFuZGxlcihldmVudDogRHJhZ0V2ZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCBwcmpJZCA9IGV2ZW50LmRhdGFUcmFuc2ZlciEuZ2V0RGF0YShcInRleHQvcGxhaW5cIik7XHJcbiAgICBwcm9qZWN0U3RhdGUubW92ZVByb2plY3QoXHJcbiAgICAgIHByaklkLFxyXG4gICAgICB0aGlzLnR5cGUgPT09IFwiYWN0aXZlXCIgPyBQcm9qZWN0U3RhdHVzLkFjdGl2ZSA6IFByb2plY3RTdGF0dXMuRmluaXNoZWRcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBAYXV0b2JpbmRcclxuICBkcmFnTGVhdmVIYW5kbGVyKF86IERyYWdFdmVudCk6IHZvaWQge1xyXG4gICAgY29uc3QgbGlzdEVsID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ1bFwiKSE7XHJcbiAgICBsaXN0RWwuY2xhc3NMaXN0LnJlbW92ZShcImRyb3BwYWJsZVwiKTtcclxuICB9XHJcblxyXG4gIGNvbmZpZ3VyZSgpIHtcclxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgdGhpcy5kcmFnT3ZlckhhbmRsZXIpO1xyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIHRoaXMuZHJvcEhhbmRsZXIpO1xyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnbGVhdmVcIiwgdGhpcy5kcmFnTGVhdmVIYW5kbGVyKTtcclxuXHJcbiAgICBwcm9qZWN0U3RhdGUuYWRkTGlzdGVuZXIoKHByb2plY3RzOiBQcm9qZWN0W10pID0+IHtcclxuICAgICAgY29uc3QgcmVsZXZhbnRQcm9qZWN0cyA9IHByb2plY3RzLmZpbHRlcigocHJqKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gXCJhY3RpdmVcIikge1xyXG4gICAgICAgICAgcmV0dXJuIHByai5zdGF0dXMgPT09IFByb2plY3RTdGF0dXMuQWN0aXZlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJqLnN0YXR1cyA9PT0gUHJvamVjdFN0YXR1cy5GaW5pc2hlZDtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuYXNzaWduZWRQcm9qZWN0cyA9IHJlbGV2YW50UHJvamVjdHM7XHJcbiAgICAgIHRoaXMucmVuZGVyUHJvamVjdHMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyQ29udGVudCgpIHtcclxuICAgIGNvbnN0IGxpc3RJZCA9IGAke3RoaXMudHlwZX0tcHJvamVjdHMtbGlzdGA7XHJcbiAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcInVsXCIpIS5pZCA9IGxpc3RJZDtcclxuICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcImgyXCJcclxuICAgICkhLnRleHRDb250ZW50ID0gYCR7dGhpcy50eXBlLnRvVXBwZXJDYXNlKCl9IFBST0pFQ1RTYDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVuZGVyUHJvamVjdHMoKSB7XHJcbiAgICBjb25zdCBsaXN0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHt0aGlzLnR5cGV9LXByb2plY3RzLWxpc3RgKSE7XHJcbiAgICBsaXN0RWwuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIGZvciAoY29uc3QgcHJqSXRlbSBvZiB0aGlzLmFzc2lnbmVkUHJvamVjdHMpIHtcclxuICAgICAgbmV3IFByb2plY3RJdGVtKHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwidWxcIikhLmlkLCBwcmpJdGVtKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUHJvamVjdElucHV0IH0gZnJvbSBcIi4vY29tcG9uZW50cy9wcm9qZWN0LWlucHV0XCI7XHJcbmltcG9ydCB7IFByb2plY3RMaXN0IH0gZnJvbSBcIi4vY29tcG9uZW50cy9wcm9qZWN0LWxpc3RcIjtcclxuXHJcbm5ldyBQcm9qZWN0SW5wdXQoKTtcclxuXHJcbm5ldyBQcm9qZWN0TGlzdChcImFjdGl2ZVwiKTtcclxuXHJcbm5ldyBQcm9qZWN0TGlzdChcImZpbmlzaGVkXCIpO1xyXG4iXSwibmFtZXMiOlsiY29uc29sZSIsImxvZyIsIlByb2plY3RTdGF0dXMiLCJhdXRvYmluZCIsIl8iLCJfMSIsImRlc2NyaXB0b3IiLCJvcmlnaW5hbE1ldGhvZCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiZ2V0IiwiYmluZCIsInRoaXMiLCJpZCIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJwZW9wbGUiLCJzdGF0dXMiLCJwcm9qZWN0U3RhdGUiLCJwcm9qZWN0cyIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJQcm9qZWN0U3RhdGUiLCJhZGRQcm9qZWN0Iiwibm9PZlBlb3BsZSIsIm5ld1Byb2plY3QiLCJQcm9qZWN0IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwiQWN0aXZlIiwicHVzaCIsInVwZGF0ZUxpc3RlbmVycyIsIm1vdmVQcm9qZWN0IiwicHJvamVjdElkIiwibmV3U3RhdHVzIiwicHJvamVjdCIsImZpbmQiLCJwcmoiLCJsaXN0ZW5lcnMiLCJsaXN0ZW5lckZuIiwic2xpY2UiLCJhZGRMaXN0ZW5lciIsInZhbGlkYXRlIiwidmFsaWRhdGFibGVJbnB1dCIsImlzdmFsaWQiLCJyZXF1aXJlZCIsIm1pbkxlbmd0aCIsImxlbmd0aCIsIm1heExlbmd0aCIsIm1pbiIsIm1heCIsInRlbXBsYXRlSWQiLCJob3N0RWxlbWVudElkIiwiaW5zZXJ0QXRTdGFydCIsIm5ld0VsZW1lbnRJZCIsInRlbXBsYXRlRWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJob3N0RWxlbWVudCIsImltcG9ydGVkTm9kZSIsImltcG9ydE5vZGUiLCJjb250ZW50IiwiZWxlbWVudCIsImZpcnN0RWxlbWVudENoaWxkIiwiYXR0YWNoIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwidGl0bGVJbnB1dEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQiLCJwZW9wbGVJbnB1dEVsZW1lbnQiLCJjb25maWd1cmUiLCJhZGRFdmVudExpc3RlbmVyIiwic3VibWl0SGFuZGxlciIsInJlbmRlckNvbnRlbnQiLCJnYXRoZXJVc2VySW5wdXQiLCJlbnRlcmVkVGl0bGUiLCJlbnRlcmVkRGVzY3JpcHRpb24iLCJlbnRlcmVkUGVvcGxlIiwiZGVzY3JpcHRpb25WYWxpZGF0YWJsZSIsInBlb3BsZVZhbGlkYXRhYmxlIiwiYWxlcnQiLCJjbGVhcklucHV0cyIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJ1c2VySW5wdXQiLCJBcnJheSIsImlzQXJyYXkiLCJkZXNjIiwiQ29tcG9uZW50IiwiaG9zdElkIiwiZHJhZ1N0YXJ0SGFuZGxlciIsImRhdGFUcmFuc2ZlciIsInNldERhdGEiLCJlZmZlY3RBbGxvd2VkIiwiZHJhZ0VuZEhhbmRsZXIiLCJ0ZXh0Q29udGVudCIsInBlcnNvbnMiLCJ0eXBlIiwiYXNzaWduZWRQcm9qZWN0cyIsImRyYWdPdmVySGFuZGxlciIsInR5cGVzIiwiY2xhc3NMaXN0IiwiYWRkIiwiZHJvcEhhbmRsZXIiLCJwcmpJZCIsImdldERhdGEiLCJGaW5pc2hlZCIsImRyYWdMZWF2ZUhhbmRsZXIiLCJyZW1vdmUiLCJyZWxldmFudFByb2plY3RzIiwiZmlsdGVyIiwicmVuZGVyUHJvamVjdHMiLCJsaXN0SWQiLCJ0b1VwcGVyQ2FzZSIsImlubmVySFRNTCIsInByakl0ZW0iLCJQcm9qZWN0SXRlbSIsIlByb2plY3RJbnB1dCIsIlByb2plY3RMaXN0Il0sInNvdXJjZVJvb3QiOiIifQ==